0`1 knapsack  -- GFG

import java.io.*;
import java.util.*;
class TestClass {
public static long max(long a, long b) 
    { 
        return (a > b) ? a : b; 
    } 
  

    public static void main(String args[] ) throws Exception {
        try{

        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       
       int t = Integer.parseInt(br.readLine());
       while(t>0){
            
       int n= Integer.parseInt(br.readLine());
       int c= Integer.parseInt(br.readLine());
            
            
       StringTokenizer stv  =new StringTokenizer(br.readLine());
       StringTokenizer stw  =new StringTokenizer(br.readLine());



        long []v = new long[n];
        long []w = new long[n];
        for(int i=0;i<n;i++){
           v[i] = Long.parseLong(stv.nextToken());
           w[i] = Long.parseLong(stw.nextToken());
        }


        long[][] dp= new long[c+1][n+1];


        for(int i=0;i<=c;i++){
            for(int j=0;j<=n;j++){
                long ki = i;
                //long kj = j;
                if(i==0 || j==0) dp[i][j] = 0;

                
                else if(w[j-1] <= ki){
                    
                    dp[i][j] = max(

                        v[j-1] + dp[i- (int)w[j-1]][j-1] ,
                        dp[i][j-1]

                    );
                }

                else if(w[j-1] > ki) { dp[i][j] = dp[i][j-1] ; }

            }
        }

       System.out.println(dp[c][n]);
  
           
           t--;
       }
        }
        catch(Exception e){return ;}
    }  
}
