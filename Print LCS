static int[] longestCommonSubsequence(int[] a, int[] b) {

        int m = a.length;
        int n = b.length;
        int[][] dp= new int[m+1][n+1];

        for(int i=0;i<=m;i++){
                 for(int j=0;j<=n;j++){
                
                        if(i==0 || j==0) dp[i][j] = 0;

                
                        else if(a[i-1] == b[j-1]){
                    
                             dp[i][j] = 1 + dp[i-1][j-1];
                        }

                        else {
                            dp[i][j] = Math.max(dp[i-1][j] , dp[i][j-1]) ;
                        }
                    }
             }
             //System.out.println(dp[m][n]);
             int len = dp[m][n];
             int[] res = new int[len];
             int index = 0;

            int i = m; 
            int j = n;

            while(i>0 && j>0){

                    if(a[i-1] == b[j-1]) {
                        res[index] = a[i-1];
                        index++;
                        i--; j--;
                    }

                    else{
 
                        if(dp[i][j-1] > dp[i-1][j]) {j--; }
                        else  {i--; ;}
                    }

            }
            int[] k = new int[len];
            for(int h=0;h<len;h++) k[h] = res[len-1-h];

            
           return k; 

    }
